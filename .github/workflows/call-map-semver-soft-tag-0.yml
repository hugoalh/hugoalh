# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[CALL] Map SemVer Soft Tag (@0)"
on:
  workflow_call:
    inputs:
      tagcurrent:
        type: "string"
        description: "{String} Current tag."
        required: false
        default: "${{github.event.release.tag_name}}"
      tagspattern_latest:
        type: "string"
        description: "{String[]} Latest release pattern of tags."
        required: false
      tagspattern_pre:
        type: "string"
        description: "{String[]} Pre release pattern of tags."
        required: false
    secrets:
      token:
        description: "{String} GitHub personal access token."
        required: true
jobs:
  main:
    name: "Main"
    permissions: {}
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.1.1"
        with:
          token: "${{secrets.token}}"
          fetch-depth: "0"
      - name: "Config Git"
        shell: "pwsh"
        run: |
          git --no-pager config --global 'user.name' 'github-actions'
          git --no-pager config --global 'user.email' 'github-actions@users.noreply.github.com'
      - name: "Update Soft Tags"
        env:
          INPUT_TAGCURRENT: "${{inputs.tagcurrent}}"
          INPUT_TAGSPATTERN_LATEST: "${{inputs.tagspattern_latest}}"
          INPUT_TAGSPATTERN_PRE: "${{inputs.tagspattern_pre}}"
        shell: "pwsh"
        run: |
          [String[]]$SemVerParts = @('Major', 'Minor', 'Patch', 'PreReleaseLabel', 'BuildLabel')
          [String[]]$SoftTagsPatternLatest = $Env:INPUT_TAGSPATTERN_LATEST -isplit '\r?\n' |
            ForEach-Object -Process { $_.Trim() } |
            Where-Object -FilterScript { $_.Length -gt 0 }
          [String[]]$SoftTagsPatternPre = $Env:INPUT_TAGSPATTERN_PRE -isplit '\r?\n' |
            ForEach-Object -Process { $_.Trim() } |
            Where-Object -FilterScript { $_.Length -gt 0 }
          [String[]]$TagsRaw = @()
          If ($Env:INPUT_TAGCURRENT.Trim().Length -eq 0) {
            $TagsRaw += git --no-pager tag --list
          }
          Else {
            $TagsRaw += $Env:INPUT_TAGCURRENT.Trim()
          }
          [SemVer[]]$Tags = $TagsRaw |
            Where-Object -FilterScript { $_ -imatch '^v(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:-.+?)?(?:\+.+?)?$' } |
            ForEach-Object -Process {
              Try {
                [SemVer]::Parse(($_ -ireplace '^v', ''))
              }
              Catch {
              }
            } |
            Sort-Object
          Write-Debug -Message "Tags [$($Tags.Count)]: $(
            $Tags |
              ForEach-Object -Process { $_.ToString() } |
              Join-String -Separator ', '
          )" -Debug
          [Hashtable]$SoftTags = @{}
          ForEach ($Tag In $Tags) {
            If ($Null -eq $Tag.PreReleaseLabel -and $Null -eq $Tag.BuildLabel) {
              ForEach ($SoftTagPatternLatest In $SoftTagsPatternLatest) {
                [String]$SoftTagLatest = $SoftTagPatternLatest
                ForEach ($SemVerPart In $SemVerParts) {
                  If ($Null -ne $Tag.($SemVerPart)) {
                    $SoftTagLatest = $SoftTagLatest -ireplace "\{\{$($SemVerPart)\}\}", $Tag.($SemVerPart).ToString()
                  }
                }
                $SoftTags.($SoftTagLatest) = $Tag
              }
            }
            ForEach ($SoftTagPatternPre In $SoftTagsPatternPre) {
              [String]$SoftTagPre = $SoftTagPatternPre
              ForEach ($SemVerPart In $SemVerParts) {
                If ($Null -ne $Tag.($SemVerPart)) {
                  $SoftTagPre = $SoftTagPre -ireplace "\{\{$($SemVerPart)\}\}", $Tag.($SemVerPart).ToString()
                }
              }
              $SoftTags.($SoftTagPre) = $Tag
            }
          }
          Write-Debug -Message "Soft Tags [$($SoftTags.Count)]: $(
            $SoftTags.GetEnumerator() |
              ForEach-Object -Process { "$($_.Name): $($_.Value.ToString())" } |
              Join-String -Separator ', '
          )" -Debug
          ForEach ($SoftTag In $SoftTags.GetEnumerator()) {
            git --no-pager tag $SoftTag.Name "v$($SoftTag.Value.ToString())" --force
            git --no-pager push origin tag $SoftTag.Name --force
          }
