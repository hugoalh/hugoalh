# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[Call] NodeJS - Publish - NPM (@0)"
on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        description: "{string} NPM token."
        required: true
permissions:
  contents: "read"
  id-token: "write"
env:
  INPUT_RELEASETAG: "${{github.event.release.tag_name}}"
  NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
jobs:
  main:
    name: "Main"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.1.1"
      - name: "Setup NodeJS"
        uses: "actions/setup-node@v4.0.1"
        with:
          node-version: "lts/*"
          check-latest: true
          registry-url: "https://registry.npmjs.org/"
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.6.0"
        with:
          version: "^2.0.0"
      - name: "Resolve Package"
        id: "resolve"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [PSCustomObject]$Manifest = Get-Content -LiteralPath (Join-Path -Path $Env:GITHUB_WORKSPACE -ChildPath 'package.json') -Raw -Encoding 'UTF8NoBOM' |
            ConvertFrom-Json -Depth 100
          [SemVer]$ManifestVersion = [SemVer]::Parse($Manifest.version)
          [SemVer]$ReleaseVersion = [SemVer]::Parse(($Env:INPUT_RELEASETAG -ireplace '^v', ''))
          If ($ReleaseVersion -ine $ManifestVersion) {
            Write-GitHubActionsWarning -Message "The manifest version ``$($ManifestVersion.ToString())`` is not match the release version ``$($ReleaseVersion.ToString())``! Will apply hot fix."
            npm version $ReleaseVersion.ToString()
            $ManifestVersion = $ReleaseVersion
          }
          [String]$Name = $Manifest.Name
          [String]$TarballName = "$($Name -ireplace '^@', '' -ireplace '\/', '-')-$($ManifestVersion.ToString()).tgz"
          [String[]]$DevDependencies = $Manifest.devDependencies.PSObject.Properties.Name ?? @()
          [Boolean]$NeedBuild = 'typescript' -iin $DevDependencies -and !(Test-Path -LiteralPath '.\dist' -PathType 'Container') -and (Test-Path -LiteralPath '.\src' -PathType 'Container') -and (Test-Path -LiteralPath '.\tsconfig.json' -PathType 'Leaf')
          [Boolean]$VersionIsPreRelease = $Null -ine $ManifestVersion.PreReleaseLabel
          [Boolean]$TagLatest = !$VersionIsPreRelease
          [Boolean]$TagPre = $True
          Try {
            [PSCustomObject]$ManifestRegistry = npm show $Name --json |
              Join-String -Separator "`n" |
              ConvertFrom-Json -Depth 100
            If ($LASTEXITCODE -ne 0) {
              Throw 'Package not found!'
            }
            If ($ManifestVersion -ile [SemVer]::Parse(($ManifestRegistry.'dist-tags'.latest ?? '0.0.0'))) {
              $TagLatest = $False
            }
            If ($ManifestVersion -ile [SemVer]::Parse(($ManifestRegistry.'dist-tags'.pre ?? '0.0.0'))) {
              $TagPre = $False
            }
          }
          Catch {
            Write-Warning -Message "Unable to resolve package: $_"
            $LASTEXITCODE = 0
          }
          [String[]]$Tags = @()
          If ($TagLatest) {
            $Tags += 'latest'
          }
          If ($TagPre) {
            $Tags += 'pre'
          }
          If (!$VersionIsPreRelease) {
            $Tags += "latest-$($ManifestVersion.Major)"
          }
          $Tags += "pre-$($ManifestVersion.Major)"
          $Tags += 'publish'
          If ($Tags.Count -eq 0) {
            Write-GitHubActionsFail -Message 'No available tags!'
          }
          [String]$TagsFirst = $Tags[0]
          [String[]]$TagsRest = (
            $Tags |
              Select-Object -SkipIndex 0
          ) ?? @()
          Set-GitHubActionsOutput -Name 'name' -Value $Name
          Set-GitHubActionsOutput -Name 'version' -Value $ManifestVersion.ToString()
          Set-GitHubActionsOutput -Name 'descriptor' -Value "$($Name)@$($ManifestVersion.ToString())"
          Set-GitHubActionsOutput -Name 'tags_first' -Value $TagsFirst
          Set-GitHubActionsOutput -Name 'tags_rest' -Value (
            $TagsRest |
              Join-String -Separator ';'
          )
          Set-GitHubActionsOutput -Name 'tarballname' -Value $TarballName
          Set-GitHubActionsOutput -Name 'build' -Value $NeedBuild.ToString().ToLower()
        shell: "pwsh"
      - name: "Build Package"
        if: "${{steps.resolve.outputs.build == 'true'}}"
        run: |
          npm install
          $TscPath = Resolve-Path -LiteralPath '.\node_modules\.bin\tsc.ps1'
          $ConfigPath = Resolve-Path -LiteralPath '.\tsconfig.json'
          If (Test-Path -LiteralPath '.\dist') {
            Remove-Item -LiteralPath '.\dist' -Recurse -Force -Confirm:$False
          }
          . $TscPath.Path -p $ConfigPath.Path
        shell: "pwsh"
      - name: "Publish With Tag ${{steps.resolve.outputs.tags_first}} (Provenance)"
        id: "publish-provenance"
        run: |
          [String]$PackageTagsFirst = $Env:INPUT_TAGSFIRST
          npm publish --provenance --tag $PackageTagsFirst
        shell: "pwsh"
        env:
          INPUT_TAGSFIRST: "${{steps.resolve.outputs.tags_first}}"
      - name: "Publish With Tag ${{steps.resolve.outputs.tags_first}}"
        if: "${{!cancelled() && steps.publish-provenance.outcome == 'failure'}}"
        id: "publish"
        run: |
          [String]$PackageTagsFirst = $Env:INPUT_TAGSFIRST
          npm publish --tag $PackageTagsFirst
        shell: "pwsh"
        env:
          INPUT_TAGSFIRST: "${{steps.resolve.outputs.tags_first}}"
      - name: "Publish With Rest Tags"
        if: "${{(!cancelled() && (steps.publish-provenance.outcome == 'success' || steps.publish.outcome == 'success')) && steps.resolve.outputs.tags_rest != ''}}"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [String]$PackageDescriptor = $Env:INPUT_DESCRIPTOR
          [String[]]$PackageTagsRest = $Env:INPUT_TAGSREST -isplit ';'
          ForEach ($PackageTagRest In $PackageTagsRest) {
            Try {
              npm dist-tag add $PackageDescriptor $PackageTagRest
            }
            Catch {
              Write-GitHubActionsError -Message $_
            }
          }
        shell: "pwsh"
        env:
          INPUT_DESCRIPTOR: "${{steps.resolve.outputs.descriptor}}"
          INPUT_TAGSREST: "${{steps.resolve.outputs.tags_rest}}"
      - name: "Pack & Upload Tarball `${{steps.resolve.outputs.tarballname}}` To GitHub Release Tag ${{env.INPUT_RELEASETAG}}"
        if: "${{!cancelled() && steps.resolve.outcome == 'success'}}"
        run: |
          npm pack
          gh release upload $Env:INPUT_RELEASETAG $Env:INPUT_TARBALLNAME --clobber --repo $Env:GITHUB_REPOSITORY
        shell: "pwsh"
        env:
          GH_TOKEN: "${{secrets.GITHUB_TOKEN}}"
          INPUT_TARBALLNAME: "${{steps.resolve.outputs.tarballname}}"
