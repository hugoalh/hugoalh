# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[DEPRECATED][CALL] PowerShell - Publish - Gallery Module (@0)"
on:
  workflow_call:
    inputs:
      build:
        type: "string"
        description: "{String} Builder for the PowerShell module."
        required: false
        default: ""
      path:
        type: "string"
        description: "{String} Root for the PowerShell module."
        required: false
        default: ".\\"
    secrets:
      POWERSHELLGALLERY_TOKEN:
        description: "{String} PowerShell Gallery token."
        required: true
jobs:
  main:
    name: "[DEPRECATED] Main"
    permissions:
      contents: "write"
    runs-on: "windows-latest"
    env:
      INPUT_BUILD: "${{inputs.build}}"
      INPUT_PATH: "${{inputs.path}}"
      INPUT_TOKEN: "${{secrets.POWERSHELLGALLERY_TOKEN}}"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.1.1"
      - name: "Setup PowerShell Environment"
        run: |
          $PSRepositoryPSGalleryMeta = Get-PSRepository -Name 'PSGallery'
          If ($PSRepositoryPSGalleryMeta.InstallationPolicy -ine 'Trusted') {
            Write-Host -Object 'Tweak PowerShell repository configuration.'
            Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -Verbose
          }
        shell: "pwsh"
      - name: "Resolve Package"
        id: "resolve-package"
        run: |
          $ManifestsPath = Get-ChildItem -LiteralPath (Join-Path -Path $Env:GITHUB_WORKSPACE -ChildPath $Env:INPUT_PATH) -Filter '*.psd1' -File
          If ($ManifestsPath.Count -ne 1) {
            Write-Host -Object "::error::Invalid manifest count! Expect ``1``; Current ``$($ManifestsPath.Count)``."
            Exit 1
          }
          [String]$ManifestPath = $ManifestsPath.FullName
          $ManifestFromTest = Test-ModuleManifest -Path $ManifestPath -Verbose
          $ManifestFromData = Import-PowerShellDataFile -LiteralPath $ManifestPath -SkipLimitCheck
          [String]$PackageName = $ManifestFromTest.Name
          [String]$PackageVersion = $ManifestFromData.ModuleVersion
          If ($Null -ine $ManifestFromData.PrivateData.PSData.Prerelease) {
            $PackageVersion += "-$($ManifestFromData.PrivateData.PSData.Prerelease)"
          }
          Add-Content -LiteralPath $Env:GITHUB_OUTPUT -Value "packagename=$($PackageName.ToLower()).$($PackageVersion).nupkg" -Confirm:$False -Encoding 'UTF8NoBOM'
        shell: "pwsh"
      - name: "Build Package"
        if: "${{inputs.build != ''}}"
        run: |
          . $Env:INPUT_BUILD
        shell: "pwsh"
      - name: "Publish Package"
        run: |
          Publish-Module -Path $Env:INPUT_PATH -NugetAPIKey $Env:INPUT_TOKEN -Force -Verbose
        shell: "pwsh"
    outputs:
      packagename: "${{steps.resolve-package.outputs.packagename}}"
  await:
    name: "Await"
    needs:
      - "main"
    if: "${{needs.main.result == 'success'}}"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Wait For Registry Update"
        run: |
          Start-Sleep -Seconds 60
        shell: "pwsh"
  assets:
    name: "Assets"
    needs:
      - "await"
      - "main"
    if: "${{needs.await.result == 'success'}}"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Upload Package `${{needs.main.outputs.packagename}}` To GitHub Release Tag ${{github.event.release.tag_name}}"
        run: |
          Invoke-WebRequest -Uri "https://psg-prod-eastus.azureedge.net/packages/$($Env:INPUT_PACKAGENAME)" -MaximumRedirection 1 -MaximumRetryCount 5 -RetryIntervalSec 5 -Method 'GET' -OutFile $Env:INPUT_PACKAGENAME
          gh release upload $Env:INPUT_RELEASETAG $Env:INPUT_PACKAGENAME --clobber --repo $Env:GITHUB_REPOSITORY
        shell: "pwsh"
        env:
          GH_TOKEN: "${{secrets.GITHUB_TOKEN}}"
          INPUT_PACKAGENAME: "${{needs.main.outputs.packagename}}"
          INPUT_RELEASETAG: "${{github.event.release.tag_name}}"
