# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[CALL] Publish Deno Package (@0)"
on:
  workflow_call:
    inputs:
      deployment_jsr:
        type: "boolean"
        description: "{boolean} Whether has deployment for JSR (JavaScript Registry)."
        required: false
        default: false
      deployment_npm:
        type: "boolean"
        description: "{boolean} Whether has deployment for NPM."
        required: false
        default: false
    secrets:
      NPM_TOKEN:
        description: "{string} NPM token."
        required: false
jobs:
  main:
    name: "Main"
    permissions:
      contents: "write"
      id-token: "write"
    runs-on: "ubuntu-latest"
    env:
      INPUT_RELEASETAG: "${{github.event.release.tag_name}}"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.1.7"
      - name: "Setup Deno"
        uses: "denoland/setup-deno@v1.5.1"
        with:
          deno-version: "^1.43.3"
      - name: "Get Deno Cache Path"
        shell: "pwsh"
        run: |-
          [PSCustomObject]$DenoInfo = deno info --json |
            ConvertFrom-Json -Depth 100
          Add-Content -LiteralPath $Env:GITHUB_ENV -Value "DENO_DIR=$($DenoInfo.denoDir.Trim())" -Confirm:$False -Encoding 'UTF8NoBOM'
      - name: "Restore Deno Cache"
        id: "deno-cache-restore"
        uses: "actions/cache/restore@v4.0.2"
        with:
          key: "Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          restore-keys: |-
            Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-
            Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}
            Deno/${{runner.os}}-${{github.run_id}}-
            Deno/${{runner.os}}-${{github.run_id}}
            Deno/${{runner.os}}-
            Deno/${{runner.os}}
            Deno/
          path: "${{env.DENO_DIR}}"
      - name: "Analyze Repository"
        id: "repository-analyze"
        shell: "pwsh"
        run: |-
          [String]$ScriptURL = 'https://raw.githubusercontent.com/hugoalh/hugoalh/main/.github/workflows/toolbox/publish-deno-package-0/analyze-repository.ts'
          deno cache "--reload=$ScriptURL" $ScriptURL
          deno run --allow-env --allow-read --allow-write --no-prompt --quiet $ScriptURL
      - name: "Verify Code"
        id: "verify-code"
        env:
          INPUT_FILES: "${{steps.repository-analyze.outputs.files}}"
        shell: "pwsh"
        run: |-
          ForEach ($File In (
            $Env:INPUT_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            deno cache $File
          }
      - name: "Publish JSR Package (Provenance)"
        id: "jsr-publish-provenance"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && inputs.deployment_jsr}}"
        run: |-
          deno publish --allow-dirty --config jsr.jsonc
      - name: "Publish JSR Package"
        if: "${{!cancelled() && steps.jsr-publish-provenance.outcome == 'failure'}}"
        run: |-
          deno publish --allow-dirty --config jsr.jsonc --no-provenance
      - name: "Setup NodeJS"
        id: "npm-setup-nodejs"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && inputs.deployment_npm}}"
        uses: "actions/setup-node@v4.0.3"
        with:
          node-version: "lts/*"
          check-latest: true
          registry-url: "https://registry.npmjs.org/"
      - name: "Get NPM Cache Path"
        id: "npm-cache-path"
        if: "${{!cancelled() && steps.npm-setup-nodejs.outcome == 'success'}}"
        shell: "pwsh"
        run: |-
          [String]$NpmCachePath = npm config get cache |
            Join-String -Separator "`n"
          Add-Content -LiteralPath $Env:GITHUB_OUTPUT -Value "result=$($NpmCachePath.Trim())" -Confirm:$False -Encoding 'UTF8NoBOM'
      - name: "Restore NPM Cache"
        id: "npm-cache-restore"
        if: "${{!cancelled() && steps.npm-cache-path.outcome == 'success'}}"
        uses: "actions/cache/restore@v4.0.2"
        with:
          key: "NPM/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{steps.npm-cache-path.outputs.result}}"
          restore-keys: |-
            NPM/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-
            NPM/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}
            NPM/${{runner.os}}-${{github.run_id}}-
            NPM/${{runner.os}}-${{github.run_id}}
            NPM/${{runner.os}}-
            NPM/${{runner.os}}
            NPM/
      - name: "Build NPM Package"
        id: "npm-build"
        if: "${{!cancelled() && steps.npm-cache-restore.outcome == 'success'}}"
        env:
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
        run: |-
          deno run --allow-all --deny-hrtime --no-prompt --quiet .dnt.ts
      - name: "Analyze NPM Package Metadata"
        id: "npm-analyze"
        if: "${{!cancelled() && steps.npm-build.outcome == 'success'}}"
        env:
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
        shell: "pwsh"
        working-directory: "${{github.workspace}}/npm"
        run: |-
          [String]$ScriptURL = 'https://raw.githubusercontent.com/hugoalh/hugoalh/main/.github/workflows/toolbox/publish-deno-package-0/analyze-npm-package-metadata.ts'
          deno cache "--reload=$ScriptURL" $ScriptURL
          deno run --allow-env --allow-read --allow-run --allow-write --no-prompt --quiet $ScriptURL
      - name: "Publish NPM Package To NPM With Main Tag `${{steps.npm-analyze.outputs.tags_main}}` (Provenance)"
        id: "npm-publish-provenance"
        if: "${{!cancelled() && steps.npm-analyze.outcome == 'success'}}"
        env:
          INPUT_TAGS_MAIN: "${{steps.npm-analyze.outputs.tags_main}}"
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
        shell: "pwsh"
        working-directory: "${{github.workspace}}/npm"
        run: |-
          npm publish --provenance --tag $Env:INPUT_TAGS_MAIN
      - name: "Publish NPM Package To NPM With Main Tag `${{steps.npm-analyze.outputs.tags_main}}`"
        id: "npm-publish-raw"
        if: "${{!cancelled() && steps.npm-publish-provenance.outcome == 'failure'}}"
        env:
          INPUT_TAGS_MAIN: "${{steps.npm-analyze.outputs.tags_main}}"
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
        shell: "pwsh"
        working-directory: "${{github.workspace}}/npm"
        run: |-
          npm publish --tag $Env:INPUT_TAGS_MAIN
      - name: "Publish NPM Package To NPM With Rest Tags"
        if: "${{!cancelled() && (steps.npm-publish-provenance.outcome == 'success' || steps.npm-publish-raw.outcome == 'success') && steps.npm-analyze.outputs.tags_rest != ''}}"
        env:
          INPUT_DESCRIPTOR: "${{steps.npm-analyze.outputs.descriptor}}"
          INPUT_TAGS_REST: "${{steps.npm-analyze.outputs.tags_rest}}"
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
        shell: "pwsh"
        working-directory: "${{github.workspace}}/npm"
        run: |-
          [String]$Descriptor = $Env:INPUT_DESCRIPTOR
          [String[]]$TagsRest = $Env:INPUT_TAGS_REST -isplit ','
          ForEach ($TagRest In $TagsRest) {
            npm dist-tag add $Descriptor $TagRest
          }
      - name: "Publish NPM Package To GitHub Release With Tag `${{env.INPUT_RELEASETAG}}` File `${{steps.npm-analyze.outputs.tarballname}}`"
        if: "${{!cancelled() && steps.npm-analyze.outcome == 'success'}}"
        env:
          GH_TOKEN: "${{secrets.GITHUB_TOKEN}}"
          INPUT_TARBALLNAME: "${{steps.npm-analyze.outputs.tarballname}}"
        shell: "pwsh"
        working-directory: "${{github.workspace}}/npm"
        run: |-
          npm pack
          gh release upload $Env:INPUT_RELEASETAG $Env:INPUT_TARBALLNAME --clobber --repo $Env:GITHUB_REPOSITORY
      - name: "Save NPM Cache"
        if: "${{!cancelled() && steps.npm-cache-restore.outcome == 'success'}}"
        uses: "actions/cache/save@v4.0.2"
        with:
          key: "NPM/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{steps.npm-cache-path.outputs.result}}"
      - name: "Save Deno Cache"
        if: "${{!cancelled() && steps.deno-cache-restore.outcome == 'success'}}"
        uses: "actions/cache/save@v4.0.2"
        with:
          key: "Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{env.DENO_DIR}}"
