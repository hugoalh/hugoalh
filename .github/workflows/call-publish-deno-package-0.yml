# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[CALL] Publish Deno Package (@0)"
on:
  workflow_call:
jobs:
  main:
    name: "Main"
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.1.2"
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v2.0.0"
        with:
          version: "^2.1.0"
      - name: "Resolve Metadata"
        id: "metadata"
        shell: "pwsh"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          If (!(Test-Path -LiteralPath '.\deno.jsonc' -PathType 'Leaf')) {
            Write-GitHubActionsFail -Message 'Missing Deno config file!'
          }
          [String[]]$Files = Get-ChildItem -Recurse -File -Name |
            Where-Object -FilterScript { $_ -imatch '\.(?:m?[jt]s|[jt]sx?)$' }
          Set-GitHubActionsOutput -Name 'dispatch_jsr' -Value (Test-Path -LiteralPath '.\jsr.jsonc' -PathType 'Leaf').ToString().ToLower()
          Set-GitHubActionsOutput -Name 'files' -Value (ConvertTo-Json -InputObject $Files -Depth 100 -Compress)
      - name: "Setup Deno"
        uses: "denoland/setup-deno@v1.1.4"
        with:
          deno-version: "^1.41.2"
      - name: "Resolve Cache Path"
        shell: "pwsh"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [PSCustomObject]$DenoInfo = deno info --json |
            Join-String -Separator "`n" |
            ConvertFrom-Json -Depth 100
          Set-GitHubActionsEnvironmentVariable -Name 'DENO_DIR' -Value $DenoInfo.denoDir -Scope 'Subsequent'
      - name: "Restore Deno Cache"
        id: "restore-deno-cache"
        uses: "actions/cache/restore@v4.0.2"
        with:
          key: "Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{env.DENO_DIR}}"
          restore-keys: |-
            Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-
            Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}
            Deno/${{runner.os}}-${{github.run_id}}-
            Deno/${{runner.os}}-${{github.run_id}}
            Deno/${{runner.os}}-
            Deno/${{runner.os}}
            Deno/
      - name: "Verify Code"
        env:
          INPUT_FILES: "${{steps.metadata.outputs.files}}"
        shell: "pwsh"
        run: |
          [Boolean]$ShouldReload = $Env:GITHUB_EVENT_NAME -iin @('schedule')
          [Boolean]$IsFail = $False
          ForEach ($File In (
            $Env:INPUT_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            Try {
              $ShouldReload ? (deno cache --reload $File) : (deno cache $File)
            }
            Catch {
              $IsFail = $True
            }
            $LASTEXITCODE = 0
          }
          If ($IsFail) {
            Exit 1
          }
      - name: "Publish Package To JSR (Provenance)"
        id: "publish-jsr-provenance"
        if: "${{steps.metadata.outputs.dispatch_jsr == 'true'}}"
        run: |
          deno publish --config jsr.jsonc
      - name: "Publish Package To JSR"
        if: "${{!cancelled() && steps.publish-jsr-provenance.outcome == 'failure' && steps.metadata.outputs.dispatch_jsr == 'true'}}"
        run: |
          deno publish --config jsr.jsonc --no-provenance
      - name: "Save Deno Cache"
        if: "${{!cancelled() && steps.restore-deno-cache.outcome == 'success'}}"
        uses: "actions/cache/save@v4.0.2"
        with:
          key: "Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{env.DENO_DIR}}"
