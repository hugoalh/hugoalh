# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[CALL] Review Deno Code (@2)"
on:
  workflow_call:
    inputs:
      run_on:
        type: "string"
        description: "{string} Type of the runner to run on."
        required: false
        default: "ubuntu-latest"
      run_sub:
        type: "boolean"
        description: "{boolean} Whether is for sub review (e.g.: test on specific operate system)."
        required: false
        default: false
      deployment_jsr:
        type: "boolean"
        description: "{boolean} Whether has deployment for JSR (JavaScript Registry)."
        required: false
        default: false
      deployment_npm:
        type: "boolean"
        description: "{boolean} Whether has deployment for NPM."
        required: false
        default: false
jobs:
  main:
    name: "Main"
    permissions:
      contents: "read"
    runs-on: "${{inputs.run_on}}"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.2.0"
      - name: "Setup Deno"
        uses: "denoland/setup-deno@v1.5.1"
        with:
          deno-version: "^1.43.3"
      - name: "Get Deno Cache Path"
        shell: "pwsh"
        run: |-
          [PSCustomObject]$DenoInfo = deno info --json |
            Join-String -Separator "`n" |
            ConvertFrom-Json -Depth 100
          Add-Content -LiteralPath $Env:GITHUB_ENV -Value "DENO_DIR=$($DenoInfo.denoDir)" -Confirm:$False -Encoding 'UTF8NoBOM'
      - name: "Restore Deno Cache"
        id: "deno-cache-restore"
        uses: "actions/cache/restore@v4.1.0"
        with:
          key: "Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          restore-keys: |-
            Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-
            Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}
            Deno/${{runner.os}}-${{github.run_id}}-
            Deno/${{runner.os}}-${{github.run_id}}
            Deno/${{runner.os}}-
            Deno/${{runner.os}}
            Deno/
          path: "${{env.DENO_DIR}}"
      - name: "Analyze Repository"
        id: "repository-analyze"
        shell: "pwsh"
        run: |-
          [String]$ScriptURL = 'https://raw.githubusercontent.com/hugoalh/hugoalh/main/.github/workflows/toolbox/review-deno-code-2/analyze-repository.ts'
          deno cache "--reload=$ScriptURL" $ScriptURL
          deno run --allow-env --allow-read --allow-write --no-prompt --quiet $ScriptURL
      - name: "Verify Code"
        id: "verify-code"
        env:
          INPUT_FILES: "${{steps.repository-analyze.outputs.files}}"
        shell: "pwsh"
        run: |-
          [Boolean]$ShouldReload = $Env:GITHUB_EVENT_NAME -iin @('schedule')
          ForEach ($File In (
            $Env:INPUT_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            $ShouldReload ? (deno cache --reload $File) : (deno cache $File)
          }
      - name: "Lint Code"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success'}}"
        run: |-
          deno lint
      - name: "Test Code"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && steps.repository-analyze.outputs.test_dispatch == 'true'}}"
        run: |-
          deno test --allow-all --coverage --no-prompt
      - name: "List Test Code Coverage"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && steps.repository-analyze.outputs.test_dispatch == 'true'}}"
        run: |-
          deno coverage
      - name: "Benchmark Code"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && steps.repository-analyze.outputs.benchmark_dispatch == 'true'}}"
        run: |-
          deno bench --allow-all --no-prompt
      # - name: "Check Dependencies Update"
      #   if: "${{!cancelled() && steps.verify-code.outcome == 'success' && !inputs.run_sub && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')}}"
      #   shell: "pwsh"
      #   run: |-
      #     [String]$Output = deno run --allow-net "--allow-read=$($Env:GITHUB_WORKSPACE)" --no-prompt https://deno.land/x/udd@0.8.2/main.ts --dry-run **/*.ts **/*.tsx deno.jsonc *>&1 |
      #       Join-String -Separator "`n"
      #     $LASTEXITCODE = 0
      #     Write-Host -Object $Output
      #     If ($Output -imatch 'able to update') {
      #       Write-Host -Object '::warning::Found dependencies that need to update!'
      #     }
      - name: "Verify Deployment For JSR"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && !inputs.run_sub && inputs.deployment_jsr}}"
        shell: "pwsh"
        run: |-
          [String]$ScriptURL = 'https://raw.githubusercontent.com/hugoalh/hugoalh/main/.github/workflows/toolbox/review-deno-code-2/verify-jsr-resources.ts'
          deno cache "--reload=$ScriptURL" $ScriptURL
          deno run --allow-env --allow-read --allow-write --no-prompt --quiet $ScriptURL
          deno publish --allow-dirty --config jsr.jsonc --dry-run --no-provenance --token 'ThisIsATokenPlaceholder'
      - name: "Verify Deployment For NPM"
        if: "${{!cancelled() && steps.verify-code.outcome == 'success' && !inputs.run_sub && inputs.deployment_npm}}"
        shell: "pwsh"
        run: |-
          [String]$ScriptURL = 'https://raw.githubusercontent.com/hugoalh/hugoalh/main/.github/workflows/toolbox/review-deno-code-2/verify-npm-resources.ts'
          deno cache "--reload=$ScriptURL" $ScriptURL
          deno run --allow-env --allow-read --allow-write --no-prompt --quiet $ScriptURL
      - name: "Save Deno Cache"
        if: "${{!cancelled() && steps.deno-cache-restore.outcome == 'success'}}"
        uses: "actions/cache/save@v4.1.0"
        with:
          key: "Deno/${{runner.os}}-${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{env.DENO_DIR}}"
