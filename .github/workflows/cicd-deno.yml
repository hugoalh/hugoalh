# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "CI/CD - Deno (Reusable Workflow)"
on:
  workflow_call:
defaults:
  run:
    shell: "pwsh"
jobs:
  # main:
  #   name: "Main"
  #   runs-on: "ubuntu-latest"
  #   steps:
  #     - name: "Checkout Repository"
  #       uses: "actions/checkout@v3.6.0"
  #     - name: "Steps Dispatcher"
  #       id: "dispatcher"
  #       run: |
  #         [String[]]$FilesBenchmark = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*_bench.[jt]s', '*_bench.[jt]sx', '*_bench.m[jt]s', '*.bench.[jt]s', '*.bench.[jt]sx', '*.bench.m[jt]s', 'bench.[jt]s', 'bench.[jt]sx', 'bench.m[jt]s') -Recurse -File |
  #           Select-Object -ExpandProperty 'FullName'
  #         Add-Content -LiteralPath $Env:GITHUB_OUTPUT -Value "benchmark=$(($FilesBenchmark.Count -gt 0).ToString().ToLower())" -Confirm:$False -Encoding 'UTF8NoBOM'
  #     - name: "Setup Deno"
  #       uses: "denoland/setup-deno@v1.1.2"
  #       with:
  #         deno-version: "^1.36.1"
  #     - name: "Get Deno Cache Directory"
  #       run: |
  #         [String]$DenoCacheDirectory = deno info --json |
  #           Join-String -Separator "`n" |
  #           ConvertFrom-Json -Depth 100 |
  #           Select-Object -ExpandProperty 'denoDir'
  #         Add-Content -LiteralPath $Env:GITHUB_ENV -Value "DENO_DIR=$DenoCacheDirectory" -Confirm:$False -Encoding 'UTF8NoBOM'
  #     - name: "Restore Deno Cache"
  #       uses: "actions/cache/restore@v3.3.1"
  #       with:
  #         key: "Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
  #         path: "${{env.DENO_DIR}}"
  #         restore-keys: |-
  #           Deno/${{github.run_id}}-${{github.run_attempt}}-
  #           Deno/${{github.run_id}}-
  #           Deno/
  #     - name: "Verify Dependencies (Cache First)"
  #       if: "${{github.event_name != 'schedule'}}"
  #       run: |
  #         deno cache mod.ts
  #     - name: "Verify Dependencies (Cache Reload)"
  #       if: "${{github.event_name == 'schedule'}}"
  #       run: |
  #         deno cache --reload mod.ts
  #     - name: "Check Dependencies Update"
  #       id: "check-dependencies-update"
  #       run: |
  #         [String[]]$Files = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*.[jt]s', '*.[jt]sx', '*.m[jt]s') -Recurse -File |
  #           Select-Object -ExpandProperty 'FullName'
  #         [Boolean]$IsFail = $False
  #         ForEach ($File In $Files) {
  #           [String]$Output =  deno run --allow-net --allow-read="$Env:GITHUB_WORKSPACE" --no-prompt https://deno.land/x/udd@0.8.2/main.ts --dry-run $File |
  #             Join-String -Separator "`n"
  #           If ($Output -imatch 'able to update') {
  #             $IsFail = $True
  #           }
  #           Write-Host -Object $Output
  #         }
  #         If ($IsFail) {
  #           Exit 1
  #         }
  #     - name: "Lint Code"
  #       id: "lint"
  #       if: "${{!cancelled()}}"
  #       # if: "${{steps.check-dependencies-update.outcome != 'cancelled'}}"
  #       run: |
  #         deno lint
  #     - name: "Test Code"
  #       id: "test"
  #       if: "${{!cancelled()}}"
  #       # if: "${{steps.lint.outcome != 'cancelled'}}"
  #       run: |
  #         deno test --allow-none --no-check --no-prompt --parallel
  #     - name: "Benchmark Code"
  #       id: "benchmark"
  #       if: "${{!cancelled() && steps.dispatcher.outputs.benchmark == 'true'}}"
  #       # if: "${{steps.test.outcome != 'cancelled' && steps.dispatcher.outputs.benchmark == 'true'}}"
  #       run: |
  #         deno bench --no-prompt
  #     - name: "Polish Deno Cache"
  #       if: "${{!cancelled()}}"
  #       run: |
  #         Remove-Item -LiteralPath (Join-Path -Path $Env:DENO_DIR -ChildPath 'gen' -AdditionalChildPath @('file')) -Recurse -Confirm:$False
  #     - name: "Save Deno Cache"
  #       if: "${{!cancelled()}}"
  #       uses: "actions/cache/save@v3.3.1"
  #       with:
  #         key: "Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
  #         path: "${{env.DENO_DIR}}"
  main:
    name: "Main"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.4.1"
        with:
          version: "^1.7.2"
      - name: "Checkout Repository"
        uses: "actions/checkout@v3.6.0"
      - name: "Read Repository"
        id: "reader"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [String[]]$FilesConfig = @(Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('deno.json', 'deno.jsonc') -File -Name)
          If ($FilesConfig.Count -eq 0) {
            Write-GitHubActionsFail -Message 'Missing Deno config!'
          }
          [String[]]$FilesGeneral = @(Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*.[jt]s', '*.[jt]sx', '*.m[jt]s') -Recurse -File -Name)
          [String[]]$FilesBenchmark = @(Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*_bench.[jt]s', '*_bench.[jt]sx', '*_bench.m[jt]s', '*.bench.[jt]s', '*.bench.[jt]sx', '*.bench.m[jt]s', 'bench.[jt]s', 'bench.[jt]sx', 'bench.m[jt]s') -Recurse -File -Name)
          [String[]]$FilesTest = @(Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*_test.[jt]s', '*_test.[jt]sx', '*_test.m[jt]s', '*.test.[jt]s', '*.test.[jt]sx', '*.test.m[jt]s', 'test.[jt]s', 'test.[jt]sx', 'test.m[jt]s') -Recurse -File -Name)
          Set-GitHubActionsOutput -Name 'general_files' -Value (
            $FilesGeneral |
              ConvertTo-Json -Depth 100 -Compress
          )
          Set-GitHubActionsOutput -Name 'benchmark_dispatch' -Value ($FilesBenchmark.Count -gt 0).ToString().ToLower()
          Set-GitHubActionsOutput -Name 'benchmark_files' -Value (
            $FilesBenchmark |
              ConvertTo-Json -Depth 100 -Compress
          )
          Set-GitHubActionsOutput -Name 'test_dispatch' -Value ($FilesTest.Count -gt 0).ToString().ToLower()
          Set-GitHubActionsOutput -Name 'test_files' -Value (
            $FilesTest |
              ConvertTo-Json -Depth 100 -Compress
          )
      - name: "Setup Deno"
        uses: "denoland/setup-deno@v1.1.2"
        with:
          deno-version: "^1.36.3"
      - name: "Get Deno Cache Directory"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [String]$DenoCacheDirectory = deno info --json |
            Join-String -Separator "`n" |
            ConvertFrom-Json -Depth 100 |
            Select-Object -ExpandProperty 'denoDir'
          Set-GitHubActionsEnvironmentVariable -Name 'DENO_DIR' -Value $DenoCacheDirectory -Scope Subsequent
      - name: "Restore Deno Cache"
        id: "restore-cache"
        uses: "actions/cache/restore@v3.3.1"
        with:
          key: "Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{env.DENO_DIR}}"
          restore-keys: |-
            Deno/${{github.run_id}}-${{github.run_attempt}}-
            Deno/${{github.run_id}}-
            Deno/
      - name: "Verify Dependencies"
        id: "verify-dependencies"
        run: |
          [Boolean]$ShouldReload = $Env:GITHUB_EVENT_NAME -ieq 'schedule'
          [Boolean]$IsFail = $False
          ForEach ($File In (
            $Env:INPUT_GENERAL_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            Try {
              If ($ShouldReload) {
                deno cache --reload $_
              }
              Else {
                deno cache $_
              }
            }
            Catch {
              $IsFail = $True
            }
          }
          If ($IsFail) {
            Exit 1
          }
        env:
          INPUT_GENERAL_FILES: "${{steps.reader.outputs.general_files}}"
      - name: "Check Dependencies Update"
        id: "check-dependencies-update"
        run: |
          [Boolean]$IsFail = $False
          ForEach ($File In (
            $Env:INPUT_GENERAL_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            [String]$Output =  deno run --allow-net --allow-read="$Env:GITHUB_WORKSPACE" --no-prompt https://deno.land/x/udd@0.8.2/main.ts --dry-run $File |
              Join-String -Separator "`n"
            If ($Output -imatch 'able to update') {
              $IsFail = $True
            }
            Write-Host -Object $Output
          }
          If ($IsFail) {
            Exit 1
          }
        env:
          INPUT_GENERAL_FILES: "${{steps.reader.outputs.general_files}}"
      - name: "Lint Code"
        id: "lint"
        if: "${{!cancelled() && steps.verify-dependencies.outcome == 'success'}}"
        run: |
          deno lint
      - name: "Test Code"
        id: "test"
        if: "${{!cancelled() && steps.verify-dependencies.outcome == 'success' && steps.reader.outputs.test_dispatch == 'true'}}"
        run: |
          deno test --no-check --no-prompt
      - name: "Benchmark Code"
        id: "benchmark"
        if: "${{!cancelled() && steps.verify-dependencies.outcome == 'success' && steps.reader.outputs.benchmark_dispatch == 'true'}}"
        run: |
          deno bench --no-prompt
      - name: "Polish Deno Cache"
        if: "${{!cancelled() && steps.restore-cache.outcome == 'success'}}"
        run: |
          Remove-Item -LiteralPath (Join-Path -Path $Env:DENO_DIR -ChildPath 'gen' -AdditionalChildPath @('file')) -Recurse -Confirm:$False
      - name: "Save Deno Cache"
        if: "${{!cancelled() && steps.restore-cache.outcome == 'success'}}"
        uses: "actions/cache/save@v3.3.1"
        with:
          key: "Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}"
          path: "${{env.DENO_DIR}}"
