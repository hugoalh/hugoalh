# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "CI/CD - Deno (Reusable Workflow)"
on:
  workflow_call:
defaults:
  run:
    shell: "pwsh"
jobs:
  main:
    name: "Main"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v3.5.3"
      - name: "Steps Dispatcher"
        id: "dispatcher"
        run: |
          [String[]]$FilesBenchmark = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*_bench.[jt]s', '*_bench.[jt]sx', '*_bench.m[jt]s', '*.bench.[jt]s', '*.bench.[jt]sx', '*.bench.m[jt]s', 'bench.[jt]s', 'bench.[jt]sx', 'bench.m[jt]s') -Recurse -File |
            Select-Object -ExpandProperty 'FullName'
          Add-Content -LiteralPath $Env:GITHUB_OUTPUT -Value "benchmark=$(($FilesBenchmark.Count -gt 0).ToString().ToLower())" -Confirm:$False -Encoding 'UTF8NoBOM'
      - name: "Setup Deno"
        uses: "denoland/setup-deno@v1.1.2"
        with:
          deno-version: "^1.36.1"
      - name: "Get Deno Cache Directory"
        run: |
          [String]$DenoCacheDirectory = deno info --json |
            Join-String -Separator "`n" |
            ConvertFrom-Json -Depth 100 |
            Select-Object -ExpandProperty 'denoDir'
          Add-Content -LiteralPath $Env:GITHUB_ENV -Value "DENO_DIR=$DenoCacheDirectory" -Confirm:$False -Encoding 'UTF8NoBOM'
      - name: "Restore Deno Cache"
        uses: "actions/cache/restore@v3.3.1"
        with:
          key: "deno-cache"
          path: "${{env.DENO_DIR}}"
      - name: "Verify Dependencies (Cache First)"
        if: "${{github.event_name != 'schedule'}}"
        run: |
          deno cache mod.ts
      - name: "Verify Dependencies (Cache Reload)"
        if: "${{github.event_name == 'schedule'}}"
        run: |
          deno cache --reload mod.ts
      - name: "Check Dependencies Update"
        id: "check-dependencies-update"
        run: |
          [String[]]$Files = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*.[jt]s', '*.[jt]sx', '*.m[jt]s') -Recurse -File |
            Select-Object -ExpandProperty 'FullName'
          [Boolean]$IsFail = $False
          ForEach ($File In $Files) {
            [String]$Output =  deno run --allow-net --allow-read="$Env:GITHUB_WORKSPACE" --no-prompt https://deno.land/x/udd@0.8.2/main.ts --dry-run $File |
              Join-String -Separator "`n"
            If ($Output -imatch 'able to update') {
              $IsFail = $True
            }
            Write-Host -Object $Output
          }
          Add-Content -LiteralPath $Env:GITHUB_OUTPUT -Value "fail=$($IsFail.ToString().ToLower())" -Confirm:$False -Encoding 'UTF8NoBOM'
      - name: "Lint Code"
        id: "lint"
        run: |
          deno lint
        continue-on-error: true
      - name: "Test Code"
        id: "test"
        run: |
          deno test --allow-none --no-check --no-prompt --parallel
        continue-on-error: true
      - name: "Benchmark Code"
        id: "benchmark"
        if: "${{steps.dispatcher.outputs.benchmark == 'true'}}"
        run: |
          deno bench --no-prompt
        continue-on-error: true
      - name: "Polish Deno Cache"
        run: |
          Remove-Item -LiteralPath (Join-Path -Path $Env:DENO_DIR -ChildPath 'gen' -AdditionalChildPath @('file')) -Recurse -Confirm:$False
      - name: "Save Deno Cache"
        uses: "actions/cache/save@v3.3.1"
        with:
          key: "deno-cache"
          path: "${{env.DENO_DIR}}"
        continue-on-error: true
      - name: "Conclusion"
        run: |
          [Boolean]$FailBenchmark = [Boolean]::Parse($Env:INPUT_FAIL_BENCHMARK)
          [Boolean]$FailLint = [Boolean]::Parse($Env:INPUT_FAIL_LINT)
          [Boolean]$FailTest = [Boolean]::Parse($Env:INPUT_FAIL_TEST)
          [Boolean]$FailUpdate = [Boolean]::Parse($Env:INPUT_FAIL_UPDATE)
          Write-Host -Object "::notice::Benchmark: $($FailBenchmark ? 'Fail' : 'Pass'); Lint: $($FailLint ? 'Fail' : 'Pass'); Test: $($FailTest ? 'Fail' : 'Pass'); Update: $($FailUpdate ? 'Fail' : 'Pass')"
          If ($FailBenchmark -or $FailLint -or $FailTest -or $FailUpdate) {
            Exit 1
          }
        env:
          INPUT_FAIL_BENCHMARK: "${{steps.benchmark.outcome == 'failure'}}"
          INPUT_FAIL_LINT: "${{steps.lint.outcome == 'failure'}}"
          INPUT_FAIL_TEST: "${{steps.test.outcome == 'failure'}}"
          INPUT_FAIL_UPDATE: "${{steps.check-dependencies-update.outputs.fail}}"
