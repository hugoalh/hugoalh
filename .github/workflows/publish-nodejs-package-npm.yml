name: "Publish NodeJS Package - NPM (Reusable Workflow)"
on:
  workflow_call:
    secrets:
      NPM_TOKEN:
        description: "{string} NPM token."
        required: true
defaults:
  run:
    shell: "pwsh"
env:
  NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
jobs:
  publish-nodejs-package-npm:
    name: "Publish NodeJS Package - NPM"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v3.5.0"
      - name: "Setup NodeJS"
        uses: "actions/setup-node@v3.6.0"
        with:
          node-version: "lts/*"
          check-latest: true
          registry-url: "https://registry.npmjs.org/"
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.2.2"
      - name: "Get Package Meta"
        id: "get-package-meta"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [PSCustomObject]$EventPayload = Get-GitHubActionsWebhookEventPayload
          [PSCustomObject]$PackageMeta = Get-Content -LiteralPath '.\package.json' -Raw -Encoding 'UTF8NoBOM' |
            ConvertFrom-Json -Depth 100
          [SemVer]$PackageVersionCurrent = [SemVer]::Parse($PackageMeta.version)
          [Boolean]$PackageVersionIsPreRelease = $EventPayload.release.prerelease -and ($PackageVersionCurrent.Major -igt 0 -or $Null -ine $PackageVersionCurrent.PreReleaseLabel)
          [Boolean]$PackageTagLatest = !$PackageVersionIsPreRelease
          [Boolean]$PackageTagPre = $True
          [String[]]$PackageDevDependencies = $PackageMeta.devDependencies.PSObject.Properties.Name ?? @()
          [String]$PackageTarballName = "$($PackageMeta.name -ireplace '^@', '' -ireplace '\/', '-')-$($PackageMeta.version).tgz"
          Try {
            [PSCustomObject]$PackageRegistry = Invoke-Expression -Command "npm view `"$($PackageMeta.name)`" --json" |
              Join-String -Separator "`n" |
              ConvertFrom-Json -Depth 100
            If ($LASTEXITCODE -ine 0) {
              Throw
            }
            If ($PackageVersionCurrent -ilt [SemVer]::Parse($PackageRegistry.dist-tags.latest)) {
              $PackageTagLatest = $False
            }
            If ($PackageVersionCurrent -ilt [SemVer]::Parse($PackageRegistry.dist-tags.pre)) {
              $PackageTagPre = $False
            }
          }
          Catch {
            $PackageTagLatest = $True
          }
          [String[]]$PackageTags = @("pre-$($PackageVersionCurrent.Major)")
          If ($PackageTagLatest -or !$PackageVersionIsPreRelease) {
            $PackageTags += "latest-$($PackageVersionCurrent.Major)"
          }
          [Boolean]$BuildDistribution = 'typescript' -iin $PackageDevDependencies -and !(Test-Path -LiteralPath '.\dist' -PathType 'Container') -and (Test-Path -LiteralPath '.\src' -PathType 'Container') -and (Test-Path -LiteralPath '.\tsconfig.json' -PathType 'Leaf')
          [Boolean]$BuildAssetsTarball = $PackageTarballName -inotin (
            $EventPayload.release.assets |
              Select-Object -ExpandProperty 'name'
          )
          Set-GitHubActionsOutput -Name 'descriptor' -Value "$($PackageMeta.name)@$($PackageMeta.version)"
          Set-GitHubActionsOutput -Name 'tag_latest' -Value $PackageTagLatest.ToString().ToLower()
          Set-GitHubActionsOutput -Name 'tag_pre' -Value $PackageTagPre.ToString().ToLower()
          Set-GitHubActionsOutput -Name 'tags' -Value (
            $PackageTags |
              Join-String -Separator ';'
          )
          Set-GitHubActionsOutput -Name 'tarballname' -Value $PackageTarballName
          Set-GitHubActionsOutput -Name 'build_distribution' -Value $BuildDistribution.ToString().ToLower()
          Set-GitHubActionsOutput -Name 'build_assetstarball' -Value $BuildAssetsTarball.ToString().ToLower()
          Set-GitHubActionsOutput -Name 'release_assetsuploadurl' -Value ($Payload.release.upload_url -ireplace '\{.+?\}$', '')
      - name: "Setup PNPM"
        if: "${{steps.get-package-meta.outputs.build_distribution == 'true' || steps.get-package-meta.outputs.build_assetstarball == 'true'}}"
        run: |
          npm --global install pnpm
      - name: "Build Distribution"
        if: "${{steps.get-package-meta.outputs.build_distribution == 'true'}}"
        run: |
          pnpm install
          $TscPath = Resolve-Path -LiteralPath '.\node_modules\.bin\tsc.ps1'
          $ConfigPath = Resolve-Path -LiteralPath '.\tsconfig.json'
          If (Test-Path -LiteralPath '.\dist') {
            Remove-Item -LiteralPath '.\dist' -Recurse -Force -Confirm:$False
          }
          Invoke-Expression -Command "$($TscPath.Path) -p $($ConfigPath.Path)"
      - name: "Publish"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [String]$PackageDescriptor = '${{steps.get-package-meta.outputs.descriptor}}'
          [Boolean]$PackageTagLatest = [Boolean]::Parse('${{steps.get-package-meta.outputs.tag_latest}}')
          [Boolean]$PackageTagPre = [Boolean]::Parse('${{steps.get-package-meta.outputs.tag_pre}}')
          [String[]]$PackageTags = ('${{steps.get-package-meta.outputs.tags}}' -isplit ';') + @('publish')
          If ($PackageTagLatest) {
            npm publish
            Invoke-Expression -Command "npm dist-tag add `"$PackageDescriptor`" pre"
          }
          ElseIf ($PackageTagPre) {
            npm publish --tag pre
          }
          Else {
            [String]$Tag = $PackageTags |
              Select-Object -First 1
            $PackageTags = $PackageTags |
              Where-Object -FilterScript { $_ -ine $Tag }
            Invoke-Expression -Command "npm publish --tag `"$Tag`""
          }
          ForEach ($Tag In $PackageTags) {
            Try {
              Invoke-Expression -Command "npm dist-tag add `"$PackageDescriptor`" `"$Tag`""
            }
            Catch {
              Write-GitHubActionsError -Message $_
            }
          }
      - name: "Build & Upload Assets Tarball"
        if: "${{steps.get-package-meta.outputs.build_assetstarball == 'true'}}"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          pnpm pack
          Try {
            Invoke-WebRequest -Uri "${{steps.get-package-meta.outputs.release_assetsuploadurl}}?name=$([Uri]::EscapeDataString('${{steps.get-package-meta.outputs.tarballname}}'))" -Headers @{
              Accept = 'application/vnd.github+json'
              Authorization = 'Bearer ${{github.token}}'
              'Content-Type' = 'application/gzip'
              'User-Agent' = $Env:GITHUB_WORKFLOW_REF
              'X-GitHub-Api-Version' = '2022-11-28'
            } -Method 'Post' -InFile '.\${{steps.get-package-meta.outputs.tarballname}}' -SkipHeaderValidation
          }
          Catch {
            Write-GitHubActionsError -Message "Unable to upload assets tarball: $_"
          }
