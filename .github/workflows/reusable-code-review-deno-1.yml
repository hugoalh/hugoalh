# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "[Reusable] Code Review - Deno @ 1"
on:
  workflow_call:
    inputs:
      runs-on:
        type: "string"
        description: "{string} Type of machine to run the job on."
        required: false
        default: "ubuntu-latest"
defaults:
  run:
    shell: "pwsh"
jobs:
  main:
    name: "Main"
    runs-on: "${{inputs.runs-on}}"
    steps:
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.6.0"
        with:
          version: "^2.0.0"
      - name: "Checkout Repository"
        uses: "actions/checkout@v4.1.1"
      - name: "Resolve Repository"
        id: "resolve"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [String[]]$FilesConfig = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('deno.json', 'deno.jsonc') -File -Name
          If ($FilesConfig.Count -eq 0) {
            Write-GitHubActionsFail -Message 'Missing Deno config!'
          }
          [String[]]$FilesGeneral = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*.[jt]s', '*.[jt]sx', '*.m[jt]s') -Recurse -File -Name
          [String[]]$FilesBenchmark = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*_bench.[jt]s', '*_bench.[jt]sx', '*_bench.m[jt]s', '*.bench.[jt]s', '*.bench.[jt]sx', '*.bench.m[jt]s', 'bench.[jt]s', 'bench.[jt]sx', 'bench.m[jt]s') -Recurse -File -Name
          [String[]]$FilesTest = Get-ChildItem -LiteralPath $Env:GITHUB_WORKSPACE -Include @('*_test.[jt]s', '*_test.[jt]sx', '*_test.m[jt]s', '*.test.[jt]s', '*.test.[jt]sx', '*.test.m[jt]s', 'test.[jt]s', 'test.[jt]sx', 'test.m[jt]s') -Recurse -File -Name
          Set-GitHubActionsOutput -Name 'general_files' -Value (ConvertTo-Json -InputObject $FilesGeneral -Depth 100 -Compress)
          Set-GitHubActionsOutput -Name 'benchmark_dispatch' -Value ($FilesBenchmark.Count -gt 0).ToString().ToLower()
          Set-GitHubActionsOutput -Name 'benchmark_files' -Value (ConvertTo-Json -InputObject $FilesBenchmark -Depth 100 -Compress)
          Set-GitHubActionsOutput -Name 'test_dispatch' -Value ($FilesTest.Count -gt 0).ToString().ToLower()
          Set-GitHubActionsOutput -Name 'test_files' -Value (ConvertTo-Json -InputObject $FilesTest -Depth 100 -Compress)
      - name: "Setup Deno"
        uses: "denoland/setup-deno@v1.1.3"
        with:
          deno-version: "^1.36.3"
      - name: "Get Deno Cache Directory"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [PSCustomObject]$DenoInfo = deno info --json |
            Join-String -Separator "`n" |
            ConvertFrom-Json -Depth 100
          Set-GitHubActionsEnvironmentVariable -Name 'DENO_DIR' -Value $DenoInfo.denoDir -Scope 'Subsequent'
      - name: "Restore Deno Cache"
        id: "restore-cache"
        uses: "actions/cache/restore@v3.3.2"
        with:
          key: "Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}-${{runner.os}}"
          path: "${{env.DENO_DIR}}"
          restore-keys: |-
            Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}-
            Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}
            Deno/${{github.run_id}}-${{github.run_attempt}}-
            Deno/${{github.run_id}}-${{github.run_attempt}}
            Deno/${{github.run_id}}-
            Deno/${{github.run_id}}
            Deno/
      - name: "Verify Dependencies"
        id: "verify-dependencies"
        run: |
          [Boolean]$ShouldReload = $Env:GITHUB_EVENT_NAME -ieq 'schedule'
          [Boolean]$IsFail = $False
          ForEach ($File In (
            $Env:INPUT_GENERAL_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            Try {
              If ($ShouldReload) {
                deno cache --reload $File
              }
              Else {
                deno cache $File
              }
            }
            Catch {
              $IsFail = $True
            }
          }
          If ($IsFail) {
            Exit 1
          }
        env:
          INPUT_GENERAL_FILES: "${{steps.resolve.outputs.general_files}}"
      - name: "Check Dependencies Update"
        id: "check-dependencies-update"
        if: "${{github.event_name == 'schedule'}}"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [Boolean]$IsFail = $False
          ForEach ($File In (
            $Env:INPUT_GENERAL_FILES |
              ConvertFrom-Json -Depth 100
          )) {
            [String]$Output =  deno run --allow-net --allow-read="$Env:GITHUB_WORKSPACE" --no-prompt https://deno.land/x/udd@0.8.2/main.ts --dry-run $File |
              Join-String -Separator "`n"
            $LASTEXITCODE = 0
            Write-Host -Object $Output
            If ($Output -imatch 'able to update') {
              $IsFail = $True
              Write-GitHubActionsError -Message "Dependencies in file ``$File`` are not up to date!"
            }
          }
          If ($IsFail) {
            Exit 1
          }
        env:
          INPUT_GENERAL_FILES: "${{steps.resolve.outputs.general_files}}"
      - name: "Lint Code"
        id: "lint"
        if: "${{!cancelled() && steps.verify-dependencies.outcome == 'success'}}"
        run: |
          deno lint
      - name: "Test Code"
        id: "test"
        if: "${{!cancelled() && steps.verify-dependencies.outcome == 'success' && steps.resolve.outputs.test_dispatch == 'true'}}"
        run: |
          deno test --allow-all --no-prompt
      - name: "Benchmark Code"
        id: "benchmark"
        if: "${{!cancelled() && steps.verify-dependencies.outcome == 'success' && steps.resolve.outputs.benchmark_dispatch == 'true'}}"
        run: |
          deno bench --allow-all --no-prompt
      - name: "Polish Deno Cache"
        if: "${{!cancelled() && steps.restore-cache.outcome == 'success'}}"
        run: |
          Remove-Item -LiteralPath (Join-Path -Path $Env:DENO_DIR -ChildPath 'gen' -AdditionalChildPath @('file')) -Recurse -Confirm:$False
      - name: "Save Deno Cache"
        if: "${{!cancelled() && steps.restore-cache.outcome == 'success'}}"
        uses: "actions/cache/save@v3.3.2"
        with:
          key: "Deno/${{github.run_id}}-${{github.run_attempt}}-${{github.job}}-${{runner.os}}"
          path: "${{env.DENO_DIR}}"
