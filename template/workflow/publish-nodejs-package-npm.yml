name: "Publish NodeJS Package - NPM"
on:
  release:
    types:
      - "published"
defaults:
  run:
    shell: "pwsh"
jobs:
  publish-nodejs-package-npm:
    name: "Publish NodeJS Package - NPM"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v3.5.0"
      - name: "Setup NodeJS"
        uses: "actions/setup-node@v3.6.0"
        with:
          node-version: "lts/*"
          check-latest: true
          registry-url: "https://registry.npmjs.org/"
      - name: "Setup PowerShell Toolkit"
        uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.1.0"
      - name: "Get Package Meta"
        id: "get-package-meta"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          [PSCustomObject]$PackageMeta = Get-Content -LiteralPath '.\package.json' -Raw -Encoding 'UTF8NoBOM' |
            ConvertFrom-Json -Depth 100
          [String[]]$PackageDevDependencies = $PackageMeta.devDependencies.PSObject.Properties.Name ?? @()
          [String]$PackageTarballName = "$($PackageMeta.name -ireplace '^@', '' -ireplace '\/', '-')-$($PackageMeta.version).tgz"
          [PSCustomObject]$Payload = Get-GitHubActionsWebhookEventPayload
          [Boolean]$BuildTypeScript = ('typescript' -iin $PackageDevDependencies) -and ('@typescript-eslint/eslint-plugin' -iin $PackageDevDependencies) -and ('@typescript-eslint/parser' -iin $PackageDevDependencies) -and !(Test-Path -LiteralPath '.\dist') -and (Test-Path -LiteralPath '.\src') -and (Test-Path -LiteralPath '.\tsconfig.json')
          [Boolean]$BuildAssetsTarball = $PackageTarballName -inotin (
            $Payload.release.assets |
              Select-Object -ExpandProperty 'name'
          )
          Set-GitHubActionsOutput -Name 'name' -Value $PackageMeta.name
          Set-GitHubActionsOutput -Name 'version' -Value $PackageMeta.version
          Set-GitHubActionsOutput -Name 'assets_tarballname' -Value $PackageTarballName
          Set-GitHubActionsOutput -Name 'assets_uploadurl' -Value ($Payload.release.upload_url -ireplace '\{.+?\}$', '')
          Set-GitHubActionsOutput -Name 'build_typescript' -Value $BuildTypeScript.ToString().ToLower()
          Set-GitHubActionsOutput -Name 'build_assetstarball' -Value $BuildAssetsTarball.ToString().ToLower()
      - name: "Setup PNPM"
        if: "${{(steps.get-package-meta.outputs.build_typescript == 'true') || (steps.get-package-meta.outputs.build_assetstarball == 'true')}}"
        run: |
          npm --global install pnpm
      - name: "Build From TypeScript"
        if: "${{steps.get-package-meta.outputs.build_typescript == 'true'}}"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          pnpm install
          $TscPath = Resolve-Path -LiteralPath '.\node_modules\.bin\tsc.ps1'
          $ConfigPath = Resolve-Path -LiteralPath '.\tsconfig.json'
          If (Test-Path -LiteralPath '.\dist') {
            Remove-Item -LiteralPath '.\dist' -Recurse -Force -Confirm:$False
          }
          Invoke-Expression -Command "$($TscPath.Path) -p $($ConfigPath.Path)"
      - name: "Publish To Tag `latest`"
        if: "${{(github.event.release.prerelease == false) || startsWith(steps.get-package-meta.outputs.version, '0.')}}"
        run: |
          npm publish
          npm dist-tag add "${{steps.get-package-meta.outputs.name}}@${{steps.get-package-meta.outputs.version}}" pre
        env:
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
      - name: "Publish To Tag `pre`"
        if: "${{(github.event.release.prerelease == true) && !startsWith(steps.get-package-meta.outputs.version, '0.')}}"
        run: |
          npm publish --tag pre
        env:
          NODE_AUTH_TOKEN: "${{secrets.NPM_TOKEN}}"
      - name: "Build & Upload Assets Tarball"
        if: "${{steps.get-package-meta.outputs.build_assetstarball == 'true'}}"
        run: |
          Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
          pnpm pack
          Try {
            Invoke-WebRequest -Uri "${{steps.get-package-meta.outputs.assets_uploadurl}}?name=$([Uri]::EscapeDataString('${{steps.get-package-meta.outputs.assets_tarballname}}'))" -Headers @{
              Accept = 'application/vnd.github+json'
              Authorization = 'Bearer ${{github.token}}'
              'Content-Type' = 'application/gzip'
              'User-Agent' = $Env:GITHUB_WORKFLOW_REF
              'X-GitHub-Api-Version' = '2022-11-28'
            } -Method 'Post' -InFile '.\${{steps.get-package-meta.outputs.assets_tarballname}}' -SkipHeaderValidation
          }
          Catch {
            Write-GitHubActionsError -Message "Unable to upload assets tarball: $_"
          }
